name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, develop ]

env:
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
  DOTNET_NOLOGO: true
  DOTNET_CLI_TELEMETRY_OPTOUT: 1

jobs:
  test:
    name: Test
    runs-on: windows-latest
    
    steps:
    - name: Checkout
      uses: actions/checkout@v5
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v5
      with:
        dotnet-version: |
          8.0.x
          6.0.x
          
    - name: Setup MSBuild
      uses: microsoft/setup-msbuild@v2
      
    - name: Setup SQL Server
      uses: potatoqualitee/mssqlsuite@v1.11
      with:
        install: sqlengine, sqlclient
        version: 2022
        
    - name: Restore dependencies
      run: dotnet restore
      
    - name: Build
      run: dotnet build --no-restore --configuration Release
      
    - name: Test
      run: dotnet test --no-build --configuration Release --verbosity normal --logger trx --collect:"XPlat Code Coverage"
      
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results
        path: |
          **/*.trx
          **/coverage.cobertura.xml

  package:
    name: Build and Pack
    runs-on: windows-latest
    needs: test
    if: github.event_name == 'push'
    
    steps:
    - name: Checkout
      uses: actions/checkout@v5
      with:
        fetch-depth: 0
        
    - name: Setup .NET
      uses: actions/setup-dotnet@v5
      with:
        dotnet-version: |
          8.0.x
          6.0.x
          
    - name: Setup MSBuild
      uses: microsoft/setup-msbuild@v2
      
    - name: Restore dependencies
      run: dotnet restore
      
    - name: Build
      run: dotnet build --no-restore --configuration Release
      
    - name: Pack
      run: dotnet pack --no-build --configuration Release --output ./artifacts
      
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: nuget-packages
        path: ./artifacts/*.nupkg

  validate-nuget:
    needs: package
    runs-on: windows-latest
    
    steps:
    - name: Setup .NET
      uses: actions/setup-dotnet@v5
      with:
        dotnet-version: |
          8.0.x
          6.0.x
          
    - name: Setup MSBuild
      uses: microsoft/setup-msbuild@v2
    
    - name: üì• Download NuGet package artifacts
      uses: actions/download-artifact@v5
      with:
        name: nuget-packages
        path: ${{ env.NuGetDirectory }}
    
    - name: üîç Validate NuGet packages
      run: |
        echo "Validating NuGet packages..."
        foreach($file in (Get-ChildItem "${{ env.NuGetDirectory }}" -Recurse -Include *.nupkg)) {
          Write-Host "Validating package: $($file.Name)"
          
          # Check if package exists and has reasonable size
          if ($file.Length -lt 1KB) {
            Write-Error "Package $($file.Name) is too small (less than 1KB)"
            exit 1
          }
          
          Write-Host "‚úÖ Package size check passed: $($file.Length) bytes"
          
          # Try advanced validation, fall back to basic if needed
          $validationPassed = $false
          
          try {
            # Advanced validation: Extract and inspect package contents
            $tempDir = Join-Path ([System.IO.Path]::GetTempPath()) ([System.Guid]::NewGuid().ToString())
            New-Item -ItemType Directory -Path $tempDir -Force | Out-Null
            
            # Verify temp directory exists
            if (-not (Test-Path $tempDir)) {
              throw "Failed to create temp directory"
            }
            
            # Load compression assembly and extract
            Add-Type -AssemblyName System.IO.Compression.FileSystem
            [System.IO.Compression.ZipFile]::ExtractToDirectory($file.FullName, $tempDir)
            
            # Check for .nuspec file
            $nuspecFiles = Get-ChildItem $tempDir -Filter "*.nuspec" -Recurse
            if ($nuspecFiles.Count -eq 0) {
              throw "Missing .nuspec file"
            }
            
            Write-Host "‚úÖ Advanced validation passed: Package structure is valid"
            $validationPassed = $true
            
            # Clean up
            Remove-Item $tempDir -Recurse -Force -ErrorAction SilentlyContinue
          }
          catch {
            Write-Host "‚ö†Ô∏è Advanced validation failed: $($_.Exception.Message)"
            Write-Host "üîÑ Falling back to basic validation..."
            
            # Clean up on error
            if (Test-Path $tempDir -ErrorAction SilentlyContinue) {
              Remove-Item $tempDir -Recurse -Force -ErrorAction SilentlyContinue
            }
            
            # Basic validation: Check if file is a valid ZIP
            try {
              Add-Type -AssemblyName System.IO.Compression.FileSystem
              $zipFile = [System.IO.Compression.ZipFile]::OpenRead($file.FullName)
              $entryCount = $zipFile.Entries.Count
              $zipFile.Dispose()
              
              if ($entryCount -gt 0) {
                Write-Host "‚úÖ Basic validation passed: Package contains $entryCount entries"
                $validationPassed = $true
              } else {
                throw "Package appears to be empty"
              }
            }
            catch {
              Write-Error "‚ùå Basic validation also failed: $($_.Exception.Message)"
              exit 1
            }
          }
          
          if (-not $validationPassed) {
            Write-Error "‚ùå Package validation failed for $($file.Name)"
            exit 1
          }
        }
        Write-Host "üéâ All packages validated successfully!"

  security-scan:
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write
    
    steps:
    - name: üõí Checkout
      uses: actions/checkout@v5
    
    - name: üîí Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: csharp
    
    - name: ‚öôÔ∏è Setup .NET
      uses: actions/setup-dotnet@v5
      with:
        dotnet-version: '8.0.x'
    
    - name: üî® Build for analysis
      run: |
        dotnet restore
        dotnet build --configuration Release
    
    - name: üîç Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3
      with:
        category: "/language:csharp"

  # Note: NuGet publishing is now handled by release.yml workflow
  # which triggers when a GitHub release is published